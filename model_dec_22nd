import pandas
import matplotlib.pyplot as plt
from sklearn import model_selection
     
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC


url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
cols = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
dataset = pandas.read_csv(url, names=cols)

print(dataset.columns)
print(dataset.shape)

print(dataset.groupby('class').count())
print(dataset.groupby('class').max())
print(dataset.groupby('class').min())
print(dataset.groupby('class').sum())

#, subplots=True, layout=(2,2), sharex=False, sharey=False
#dataset.plot(kind='line')
#dataset.plot(kind='box')
#dataset.plot(kind='box',subplots=True,layout=(1,4),sharex=False,sharey=False)
#plt.show()

#dataset.hist()
#plt.show()

# Split-out validation dataset
array = dataset.values # convert dataframe to list

X = array[:,0:4] # : all rows,and  0:4  first four columns 0 to 3
Y = array[:,4]  # : all rows and 4th col

validation_size = 0.20
seed = 7

X_train, X_validation, Y_train, Y_validation = model_selection.train_test_split(X, Y, test_size=validation_size, random_state=seed)



####
models = []
models.append(('LR', LogisticRegression()))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC()))


scoring = 'accuracy'
results = []
names = []
for name, model in models:
          
	kfold = model_selection.KFold(n_splits=10, random_state=7)
	
	cv_results = model_selection.cross_val_score(model, X_train, Y_train, cv=kfold, scoring=scoring)
	results.append(cv_results)
	names.append(name)
	msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
	print(msg)










